---
layout: post
title: Як готуватись до інтерв'ю та життя після універу
image: http://t3.gstatic.com/images?q=tbn:ANd9GcSrnXGSGEQ5stp8f9KNV1WXnLzVoXsf30lp5fGMD8FdBBjVk3US
category: 
tags: interview, reading, deep-learning
published: true
summary: Вчити англійську, вчити основи алгоритмів, резюме на arsen@твіттер.ком, всі лінки зібрано в розділі tl;dr, прочитайте Sapiens чудовий мікс науки і журналістики
---

# TL;DR

Ось всі лінки для швидкого пошуку:

* Для бажаючих працювати в Твітері - резюме кидайте на arsen@твіттер.ком
* [Основи алгоритмів](https://mitpress.mit.edu/books/introduction-algorithms)
* [Алгоритми та структури данних](https://www.amazon.com/Data-Structures-Algorithms-Alfred-Aho/dp/0201000237/ref=sr_1_3?s=books&ie=UTF8&qid=1475961977&sr=1-3&keywords=Data+Structures+and+Algorithms)
* [Top Coder](https://www.topcoder.com/)
* [HackerRank](https://www.hackerrank.com/)
* [LeetCode](https://leetcode.com/) + [Шпора для LeetCode](https://www.gitbook.com/book/tenderleo/leetcode-solutions-/details)
* [Дизайн системи](https://www.hiredintech.com/courses/system-design)
* [Geeks For Geeks](http://www.geeksforgeeks.org/)
* [The Deep Learning book](http://www.deeplearningbook.org/)
* [Курс з нейронних мереж](https://www.coursera.org/learn/neural-networks) на Coursera
* [On Intelligence](http://www.onintelligence.org/)
* [Sapiens](https://en.wikipedia.org/wiki/Sapiens:_A_Brief_History_of_Humankind)

# Чому?

В розмовах зі студентами комп'ютерних наук виникали питання, про рекомендації книжок для розвитку. Для себе я почув два суміжних питання: "Що варто читати інженерам програмістам для професійного розвитку?", та "Що варто читати для особистісного розвитку?". Мої відповіді віддзеркалюють лише мій скромний шлях. Отже

# English

Може це прозвучить дивно, але прочитайте всі наведені книги англійською. Знання принципів та формул цінне на стільки на скільки ви зможете їх пояснити, а пояснювати будете англійською, тож принаймні ознайомтесь із тим як звучать терміни.

# Співбесіди в долині

Співбесіди бувають трьох видів: алгоритмічні, архітектурні та поведінкові. Коротко про кожну з них

## Алгоритмічні

Для того, щоб розібратись з алгоритмічними дивіться основи алгоритмів ось у цих книжках: [Основи алгоритмів](https://mitpress.mit.edu/books/introduction-algorithms) і [Алгоритми та структури даних](https://www.amazon.com/Data-Structures-Algorithms-Alfred-Aho/dp/0201000237/ref=sr_1_3?s=books&ie=UTF8&qid=1475961977&sr=1-3&keywords=Data+Structures+and+Algorithms). Для тих хто більше любить кодити ніж читати є сайти з інтерактивними олімпіадами:  [Top Coder](https://www.topcoder.com/), [HackerRank](https://www.hackerrank.com/) та [LeetCode](https://leetcode.com/). Для останнього є навіть [шпора](https://www.gitbook.com/book/tenderleo/leetcode-solutions-/details), дуже ймовірно що для інших теж, проте я полінувався гуглити. Особливу увагу я б звернув на наступні розділи: хеш таблиці, сортування, масиви і вказівники, зв'язні списки, дерева. Коли прокачаєтесь настільки, що задачка на зразок "перетворити зв'язаний список у дерево і навпаки" буде вирішуватись за кавою - перейдіть до графів та [імовірнісних структур даних](https://en.wikipedia.org/wiki/Category:Probabilistic_data_structures). З останніми достатньо розуміти як працює [блум фільтр](https://en.wikipedia.org/wiki/Bloom_filter) та [гіпер-лог-лог](https://en.wikipedia.org/wiki/HyperLogLog)

## Архітектурні

Це такий вид співбесід, де коду буде написано мінімально, проте дуже важливо аргументовано пояснювати свою точку зору. Прикладом може слугувати питання "як побудувати URL-скорочувалку, на зразок bit.ly", або "як побудувати мікро-блог". Тут є два моменти - перше, питання завідомо задається без додаткової інформації і цю інформацію треба випитати у співбесідувача, друге, треба знати фізику і могти "прикинути" різні вимоги до системи. Щоб зорієнтуватись у першому моменті є відео лекція з підготовкою до таких питань - [дизайн системи](https://www.hiredintech.com/courses/system-design). А для того, щоб розібратись з другою частиною треба знати [трошки фізики]() та прослухати пару відео де обговорюють реальні дизайни існуючих систем з їхніми плюсами та мінусами. Ось [лекції з Ґарварду на цю тему](https://www.youtube.com/watch?v=-W9F__D3oY4), або [лекція з Твітеру](https://www.infoq.com/presentations/Twitter-Timeline-Scalability) та ще [багато цікавих лінків](https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview) на цю тему

## Поведінкові

Поведінкові запитання більше стосуються вирішення конфліктів та взаємодії з вашими підлеглими чи босами. Тут важливо розуміти такі моменти - конфлікт це природньо, проте нервувати чи дратуватись через конфлікт не є природнім. Переважно надають перевагу людині, що готова в деталях обгрунтувати власну позицію проте не триматиметься за неї до останнього і відкрито сприймає критику та заперечення, ладна зминіти свою позицію та оцінити альтернативні підходи. Підготуватись до такої співбесіди можна за допомогою "дебатів" - задайте собі просте питання, наприклад, "чи корисно пити каву?", "чи давати дітям бавитись в комп'ютерні ігри?" тощо, та спробуте аргументувати спершу позицію "за", а після цього позицію "проти". Вищий пілотаж, це коли ви можете розвинути одну позицію, грунтуючись на тезах попередньої.

## Спільнота

Як би страшно не звучали всі ці вимоги, але такі ж випробування припадають на тисячі інших студентів по всьому світу, тож ви не одні. Шукайте спільноти людей де обговорюють такі питання і беріть інформацію з них також. Я вже згадував про шпори для LeetCode, до цього можна шукати по [Quora](https://www.quora.com/). Дуже багато інфи також є на [Geeks For Geeks](http://www.geeksforgeeks.org/).

# Ідеї з просування кар'єри

Найефективніше, що можна зробити для власної кар'єри - це вивчити англійську. Після цього - поїхати мандрувати. Легкий спосіб поєднити одне і інше - це податись на WorkAndTravel, отримати студентську візу із дозволом на роботу. Проте замість мити посуд чи розносити піцу, розіслати своє резюме у всі IT-шні контори міста де ви опинитесь. Якщо раптом у вас буде можливість самостійно обирати місто - обирайте західне узбережжя. Тут купа роботи для студентів-комп'ютерників і є де мандрувати. Не вагайтесь писати мені на arsen.kostenko@гмейл.ком чи фейсбук чи хенгаутс.

# Куди котиться цей світ

Із співбесідами трохи розібрались тепер про особистий розвиток. Радше за все наступних 10 років ми будемо дивитись на те, як стрімко розвиватиметься штучний інтелект і тому варто принаймні розуміти, про що саме йде мова. Таких "хвиль" в розвиткові AI було вже декілька - це четверта.

## Deep learning

Цього разу все, кажуть, серйозно. Принаймні про це говорять такі світила як [Ілон Маск](http://www.theverge.com/2016/6/2/11837566/elon-musk-one-ai-company-that-worries-me), [Марк Андресен](http://www.vox.com/new-money/2016/10/5/13081058/marc-andreessen-ai-future) та [багато](http://fortune.com/ai-artificial-intelligence-deep-machine-learning/) [багато](http://ben-evans.com/benedictevans/2016/6/23/ai-apple-and-google) [інших](http://a16z.com/2016/06/10/ai-deep-learning-machines/). Дехто говорить [реально страшні речі](https://www.ted.com/talks/sam_harris_can_we_build_ai_without_losing_control_over_it?language=en). Тож я дуже рекомендую розібратись з тим, що означає цей новий підхід до штучного інтелекту і як він працює. Ось [курс з нейронних мереж](https://www.coursera.org/learn/neural-networks) на Курсері. Ось чудова і захоплива книга про основи нейронної діяльності мозку [On Intelligence](http://www.onintelligence.org/).

Для бажаючих розібратись в деталях, ось основна книга від "батьків” терміну deep learning, зі скромною назвою [The Deep Learning book](http://www.deeplearningbook.org/)

# Інше

Книжковим відкриттям цього року однозначно є [Sapiens](https://en.wikipedia.org/wiki/Sapiens:_A_Brief_History_of_Humankind)